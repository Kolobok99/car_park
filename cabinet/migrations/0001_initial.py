# Generated by Django 4.0.3 on 2022-03-20 10:24

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(blank=True, max_length=20, null=True, verbose_name='Имя')),
                ('last_name', models.CharField(blank=True, max_length=20, null=True, verbose_name='Фамилия')),
                ('patronymic', models.CharField(blank=True, max_length=20, null=True, verbose_name='Отчество')),
                ('birthdate', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('image', models.ImageField(blank=True, null=True, upload_to='', verbose_name='Аватарка')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True, verbose_name='Почта')),
                ('role', models.CharField(choices=[('a', 'admin'), ('m', 'manager'), ('d', 'driver')], default='d', max_length=1, verbose_name='Роль')),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CarBrand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, verbose_name='Название бредна')),
            ],
            options={
                'verbose_name': 'Марка',
                'verbose_name_plural': 'Марки',
            },
        ),
        migrations.CreateModel(
            name='DocType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, verbose_name='Наименования документа')),
                ('type', models.CharField(choices=[('m', 'Человек'), ('с', 'Машина')], default='c', max_length=1)),
            ],
            options={
                'verbose_name': 'Тип документа',
                'verbose_name_plural': 'Типы документов',
            },
        ),
        migrations.CreateModel(
            name='Driver',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='d_user', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('phone', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(99999999999), django.core.validators.MinValueValidator(10000000000)], verbose_name='номер телефона')),
                ('unique_number', models.IntegerField(blank=True, db_index=True, null=True, validators=[django.core.validators.MaxValueValidator(9999), django.core.validators.MinValueValidator(1)], verbose_name='уникальный номер')),
            ],
            options={
                'verbose_name': 'Водитель',
                'verbose_name_plural': 'Водители',
            },
            bases=('cabinet.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Manager',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='m_user', serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Менеджер',
                'verbose_name_plural': 'Менеджеры',
            },
            bases=('cabinet.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Car',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_number', models.CharField(max_length=5, unique=True, verbose_name='Регистрационный номер')),
                ('region_code', models.SmallIntegerField(validators=[django.core.validators.MaxValueValidator(200), django.core.validators.MinValueValidator(1)], verbose_name='Код региона')),
                ('brand', models.ForeignKey(on_delete=models.SET(1), related_name='cars', to='cabinet.carbrand', verbose_name='Марка')),
                ('onwer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='my_cars', to='cabinet.driver')),
            ],
            options={
                'verbose_name': 'Автомобиль',
                'verbose_name_plural': 'Автомобили',
            },
        ),
        migrations.CreateModel(
            name='AutoDoc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateField(auto_now_add=True, verbose_name='Дата создания')),
                ('expiration_date', models.DateField(verbose_name='Дата окончания')),
                ('file', models.FileField(upload_to='', verbose_name='Эл. копия документа')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='doc_owner', to='cabinet.car')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='auto_docs', to='cabinet.doctype')),
            ],
            options={
                'verbose_name': 'Документ машины',
                'verbose_name_plural': 'Документы машины',
            },
        ),
        migrations.CreateModel(
            name='FuelCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('limit', models.PositiveIntegerField(verbose_name='лимит')),
                ('number', models.IntegerField(unique=True, verbose_name='номер')),
                ('onwer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='my_cards', to='cabinet.driver')),
            ],
            options={
                'verbose_name': 'Топливная карта',
                'verbose_name_plural': 'Топливные карты',
            },
        ),
        migrations.CreateModel(
            name='DriverDoc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateField(auto_now_add=True, verbose_name='Дата создания')),
                ('expiration_date', models.DateField(verbose_name='Дата окончания')),
                ('file', models.FileField(upload_to='', verbose_name='Эл. копия документа')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='people_docs', to='cabinet.doctype')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='doc_owner', to='cabinet.driver')),
            ],
            options={
                'verbose_name': 'Водительский документ',
                'verbose_name_plural': 'Водительские документы',
            },
        ),
    ]
