# Generated by Django 4.0.3 on 2022-07-22 11:49

import cabinet.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(error_messages={'invalid': 'Неправильно совсем!', 'unique': 'Пользователь с таким email уже существует.'}, max_length=254, unique=True, verbose_name='Почта')),
                ('password', models.CharField(max_length=128, verbose_name='Пароль')),
                ('first_name', models.CharField(max_length=20, verbose_name='Имя')),
                ('last_name', models.CharField(max_length=20, verbose_name='Фамилия')),
                ('patronymic', models.CharField(max_length=20, verbose_name='Отчество')),
                ('phone', models.CharField(max_length=11, unique=True, validators=[django.core.validators.RegexValidator('^\\d{11}$', 'Номер телефона состоит из 11 цифр')], verbose_name='Номер телефона')),
                ('image', models.ImageField(blank=True, null=True, upload_to=cabinet.models.MyUser.path_to_upload_image, verbose_name='Аватарка')),
                ('role', models.CharField(choices=[('a', 'admin'), ('m', 'manager'), ('d', 'driver'), ('e', 'engineer')], default='d', max_length=1, verbose_name='Роль')),
                ('is_active', models.BooleanField(default=False)),
                ('activation_code', models.CharField(blank=True, max_length=6, null=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('chat_id', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='ID телеграмм чата')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
        ),
        migrations.CreateModel(
            name='Car',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_number', models.CharField(max_length=6, unique=True, validators=[django.core.validators.RegexValidator(message='Введите номер правильно!', regex='[a-zA-Z]{1}[0-9]{3}[a-zA-Z]{2}')], verbose_name='Регистрационный номер')),
                ('region_code', models.PositiveSmallIntegerField(validators=[django.core.validators.MaxValueValidator(200, message='Укажите меньше 200!')], verbose_name='Код региона')),
                ('last_inspection', models.DateField(blank=True, null=True, verbose_name='Последний осмотр')),
                ('image', models.ImageField(blank=True, null=True, upload_to=cabinet.models.Car.path_to_upload_image, verbose_name='Фотография')),
            ],
            options={
                'verbose_name': 'Автомобиль',
                'verbose_name_plural': 'Автомобили',
            },
        ),
        migrations.CreateModel(
            name='CarBrand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=20, unique=True, verbose_name='Марка')),
            ],
            options={
                'verbose_name': 'Марка',
                'verbose_name_plural': 'Марки',
            },
        ),
        migrations.CreateModel(
            name='DocType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Наименования')),
                ('type', models.CharField(choices=[('m', 'Человек'), ('a', 'Машина')], default='a', max_length=1, verbose_name='Тип')),
            ],
            options={
                'verbose_name': 'Тип документа',
                'verbose_name_plural': 'Типы документов',
            },
        ),
        migrations.CreateModel(
            name='TypeOfAppl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Тип заявки',
                'verbose_name_plural': 'Типы заявок',
            },
        ),
        migrations.CreateModel(
            name='WhiteListEmail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, verbose_name='Email')),
            ],
            options={
                'verbose_name': 'White List of Emil',
                'verbose_name_plural': 'White List of Emil',
            },
        ),
        migrations.CreateModel(
            name='UserDoc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateField(auto_now_add=True, verbose_name='Дата добавления')),
                ('start_date', models.DateField(verbose_name='Дата выдачи')),
                ('end_date', models.DateField(verbose_name='Дата окончания')),
                ('file', models.FileField(blank=True, null=True, upload_to=cabinet.models.UserDoc.path_to_upload_file, verbose_name='Копия')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='my_docs', to=settings.AUTH_USER_MODEL, verbose_name='Владелец')),
                ('type', models.ForeignKey(on_delete=models.SET(1), related_name='people_docs', to='cabinet.doctype', verbose_name='Тип')),
            ],
            options={
                'verbose_name': 'Водительский документ',
                'verbose_name_plural': 'Водительские документы',
            },
        ),
        migrations.CreateModel(
            name='HistoricalUserDoc',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateField(blank=True, editable=False, verbose_name='Дата добавления')),
                ('start_date', models.DateField(verbose_name='Дата выдачи')),
                ('end_date', models.DateField(verbose_name='Дата окончания')),
                ('file', models.TextField(blank=True, max_length=100, null=True, verbose_name='Копия')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Владелец')),
                ('type', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='cabinet.doctype', verbose_name='Тип')),
            ],
            options={
                'verbose_name': 'historical Водительский документ',
                'verbose_name_plural': 'historical Водительские документы',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMyUser',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('email', models.EmailField(db_index=True, error_messages={'invalid': 'Неправильно совсем!', 'unique': 'Пользователь с таким email уже существует.'}, max_length=254, verbose_name='Почта')),
                ('password', models.CharField(max_length=128, verbose_name='Пароль')),
                ('first_name', models.CharField(max_length=20, verbose_name='Имя')),
                ('last_name', models.CharField(max_length=20, verbose_name='Фамилия')),
                ('patronymic', models.CharField(max_length=20, verbose_name='Отчество')),
                ('phone', models.CharField(db_index=True, max_length=11, validators=[django.core.validators.RegexValidator('^\\d{11}$', 'Номер телефона состоит из 11 цифр')], verbose_name='Номер телефона')),
                ('image', models.TextField(blank=True, max_length=100, null=True, verbose_name='Аватарка')),
                ('role', models.CharField(choices=[('a', 'admin'), ('m', 'manager'), ('d', 'driver'), ('e', 'engineer')], default='d', max_length=1, verbose_name='Роль')),
                ('is_active', models.BooleanField(default=False)),
                ('activation_code', models.CharField(blank=True, max_length=6, null=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('chat_id', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='ID телеграмм чата')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Пользователь',
                'verbose_name_plural': 'historical Пользователи',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalFuelCard',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('limit', models.PositiveIntegerField(blank=True, verbose_name='Лимит')),
                ('number', models.CharField(blank=True, db_index=True, max_length=16, validators=[django.core.validators.RegexValidator('^\\d{16}$', 'Номер топливной карты состоит из 16 цифр')], verbose_name='Номер')),
                ('balance', models.PositiveIntegerField(blank=True, default=None, null=True, verbose_name='Остаток')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Владелец')),
            ],
            options={
                'verbose_name': 'historical Топливная карта',
                'verbose_name_plural': 'historical Топливные карты',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCar',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('registration_number', models.CharField(db_index=True, max_length=6, validators=[django.core.validators.RegexValidator(message='Введите номер правильно!', regex='[a-zA-Z]{1}[0-9]{3}[a-zA-Z]{2}')], verbose_name='Регистрационный номер')),
                ('region_code', models.PositiveSmallIntegerField(validators=[django.core.validators.MaxValueValidator(200, message='Укажите меньше 200!')], verbose_name='Код региона')),
                ('last_inspection', models.DateField(blank=True, null=True, verbose_name='Последний осмотр')),
                ('image', models.TextField(blank=True, max_length=100, null=True, verbose_name='Фотография')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('brand', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='cabinet.carbrand', verbose_name='Марка')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Владелец')),
            ],
            options={
                'verbose_name': 'historical Автомобиль',
                'verbose_name_plural': 'historical Автомобили',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAutoDoc',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateField(blank=True, editable=False, verbose_name='Дата добавления')),
                ('start_date', models.DateField(verbose_name='Дата выдачи')),
                ('end_date', models.DateField(verbose_name='Дата окончания')),
                ('file', models.TextField(blank=True, max_length=100, null=True, verbose_name='Копия')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='cabinet.car', verbose_name='Владелец')),
                ('type', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='cabinet.doctype', verbose_name='Тип')),
            ],
            options={
                'verbose_name': 'historical Документ машины',
                'verbose_name_plural': 'historical Документы машины',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalApplication',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('start_date', models.DateField(blank=True, editable=False, verbose_name='Время создания')),
                ('time_to_execute', models.PositiveIntegerField(default=0, verbose_name='Время на выполнение')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Дата окончания')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активность заявки')),
                ('status', models.CharField(choices=[('O', 'Ожидает рассмотрения менеджера'), ('OE', 'Ожидает подтверждение механика'), ('REP', 'Ремонтируется'), ('V', 'Выполнена'), ('P', 'Просрочена'), ('T', 'Отклонено')], default='O', max_length=3, verbose_name='Статус')),
                ('urgency', models.CharField(choices=[('N', 'Не срочно'), ('U', 'Срочно'), ('S', 'Очень срочно')], default='N', max_length=1, verbose_name='Cрочность')),
                ('description', models.TextField(verbose_name='Описание')),
                ('manager_descr', models.TextField(blank=True, null=True, verbose_name='Комментарий менеджера')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('car', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='cabinet.car', verbose_name='Машина')),
                ('engineer', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Механик')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Владелец')),
                ('type', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='cabinet.typeofappl', verbose_name='Тип заявки')),
            ],
            options={
                'verbose_name': 'historical Заявка',
                'verbose_name_plural': 'historical Заявки',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='FuelCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('limit', models.PositiveIntegerField(blank=True, verbose_name='Лимит')),
                ('number', models.CharField(blank=True, max_length=16, unique=True, validators=[django.core.validators.RegexValidator('^\\d{16}$', 'Номер топливной карты состоит из 16 цифр')], verbose_name='Номер')),
                ('balance', models.PositiveIntegerField(blank=True, default=None, null=True, verbose_name='Остаток')),
                ('owner', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='my_card', to=settings.AUTH_USER_MODEL, verbose_name='Владелец')),
            ],
            options={
                'verbose_name': 'Топливная карта',
                'verbose_name_plural': 'Топливные карты',
            },
        ),
        migrations.AddField(
            model_name='car',
            name='brand',
            field=models.ForeignKey(on_delete=models.SET(1), related_name='cars', to='cabinet.carbrand', verbose_name='Марка'),
        ),
        migrations.AddField(
            model_name='car',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=models.SET(None), related_name='my_cars', to=settings.AUTH_USER_MODEL, verbose_name='Владелец'),
        ),
        migrations.CreateModel(
            name='AutoDoc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateField(auto_now_add=True, verbose_name='Дата добавления')),
                ('start_date', models.DateField(verbose_name='Дата выдачи')),
                ('end_date', models.DateField(verbose_name='Дата окончания')),
                ('file', models.FileField(blank=True, null=True, upload_to=cabinet.models.AutoDoc.upload_file, verbose_name='Копия')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='my_docs', to='cabinet.car', verbose_name='Владелец')),
                ('type', models.ForeignKey(on_delete=models.SET(1), related_name='auto_docs', to='cabinet.doctype', verbose_name='Тип')),
            ],
            options={
                'verbose_name': 'Документ машины',
                'verbose_name_plural': 'Документы машины',
            },
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(auto_now_add=True, verbose_name='Время создания')),
                ('time_to_execute', models.PositiveIntegerField(default=0, verbose_name='Время на выполнение')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Дата окончания')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активность заявки')),
                ('status', models.CharField(choices=[('O', 'Ожидает рассмотрения менеджера'), ('OE', 'Ожидает подтверждение механика'), ('REP', 'Ремонтируется'), ('V', 'Выполнена'), ('P', 'Просрочена'), ('T', 'Отклонено')], default='O', max_length=3, verbose_name='Статус')),
                ('urgency', models.CharField(choices=[('N', 'Не срочно'), ('U', 'Срочно'), ('S', 'Очень срочно')], default='N', max_length=1, verbose_name='Cрочность')),
                ('description', models.TextField(verbose_name='Описание')),
                ('manager_descr', models.TextField(blank=True, null=True, verbose_name='Комментарий менеджера')),
                ('car', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applications', to='cabinet.car', verbose_name='Машина')),
                ('engineer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='my_repair_apps', to=settings.AUTH_USER_MODEL, verbose_name='Механик')),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='my_apps', to=settings.AUTH_USER_MODEL, verbose_name='Владелец')),
                ('type', models.ForeignKey(on_delete=models.SET(1), to='cabinet.typeofappl', verbose_name='Тип заявки')),
            ],
            options={
                'verbose_name': 'Заявка',
                'verbose_name_plural': 'Заявки',
            },
        ),
    ]
